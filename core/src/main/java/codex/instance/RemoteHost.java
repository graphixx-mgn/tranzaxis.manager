package codex.instance;

import codex.model.Access;
import codex.model.Catalog;
import codex.model.Entity;
import codex.model.EntityDefinition;
import codex.service.AbstractRemoteService;
import codex.service.RemoteServiceControl;
import codex.type.Str;
import codex.utils.ImageUtils;
import java.lang.reflect.ParameterizedType;
import java.rmi.RemoteException;
import java.text.MessageFormat;
import javax.swing.ImageIcon;

@EntityDefinition(autoGenerated = true)
public class RemoteHost extends Catalog {
    
    private static final ImageIcon ICON_REMOTE = ImageUtils.getByPath("/images/remotehost.png");
    
    private final static String PROP_USER_NAME = "userName";
    private final static String PROP_HOST_NAME = "hostName";
    private final static String PROP_HOST_ADDR = "hostAddress";
    
    private final Instance instance;

    public RemoteHost(Instance instance) {
        super(null, ICON_REMOTE, instance.user, null);
        setTitle(MessageFormat.format("{0}/{1}", instance.address, instance.user));

        // Properties
        model.addDynamicProp(PROP_USER_NAME, new Str(null), null, this::getPID);
        model.addDynamicProp(PROP_HOST_NAME, new Str(null), Access.Select, () -> instance.host);
        model.addDynamicProp(PROP_HOST_ADDR, new Str(null), Access.Select, instance.address::getHostAddress);

        this.instance = instance;
        setID(instance.hashCode());

        try {
            instance.getServices().forEach((serviceClassName, remoteService) -> {
                try {
                    Class<? extends AbstractRemoteService> serviceClass = Class.forName(serviceClassName).asSubclass(AbstractRemoteService.class);
                    RemoteServiceControl serviceControl = createControl(serviceClass);
                    if (serviceControl != null) {
                        attach(serviceControl);
                    }
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
            });
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Class<? extends Entity> getChildClass() {
        return RemoteServiceControl.class;
    }

    @Override
    public boolean isLeaf() {
        return true;
    }

    @Override
    public boolean allowModifyChild() {
        return false;
    }

    public final Instance getInstance() {
        return instance;
    }

    @SuppressWarnings("unchecked")
    private RemoteServiceControl createControl(Class<? extends AbstractRemoteService> serviceClass) {
        Class<? extends RemoteServiceControl> controlClass = (Class<? extends RemoteServiceControl>) ((ParameterizedType) serviceClass.getGenericSuperclass()).getActualTypeArguments()[1];
        if (!RemoteServiceControl.class.equals(controlClass)) {
            return Entity.newInstance(controlClass, this.toRef(), serviceClass.getCanonicalName());
        }
        return null;
    }
}
